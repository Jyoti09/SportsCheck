Notes on Git from LinkedIn course "Git essential training: The Basics" by Kevin Skoglund
i) A short single-line summary(less than 50 characters)
ii) Optionally followed by a blank line and a more complete description
-) Keep each line to less than 72 characters
	For the git commit to fit in the screen when it is accessed from different devices.
- Write commit messages in present tense, not past tense

"Fix for a bug" or "Fixes a bug", not "fixed a bug" 

- Bullet points are usually asterisks or hyphens
Can add "tracking numbers" from bugs or support requests
	eg: "#38405-"
- Can develop shorthand for your organization 
	eg: "[css, js]", "bugfix"
- Be clear and descriptive 

"You could use something like fix typo but that's pretty generic, be better if you labeled it with something that was more descriptive like, add missing hyphen in project section of HTML. Instead of using update login code, say what you did, I changed the user authentication to use Blowfish. And don't put in extra information that really doesn't have a place in the permanent commit log. So updates member report, we should discuss if this is right next week. Well the thing is this commit message is going to live on into next year and the year after that and so on. So it doesn't really make sense to write that kind of message. Let me give you an example that demonstrates all of these together. So here we have a sample commit message, the first line is the simple summary: it starts with a id number, a tracking number, ghi stands for github issue, a lot of people use that. And then it has an id number for which github issue we're talking about. Then it says fixes bug in admin layout, and then it's more descriptive below that. Now fixes bug is pretty generic, it doesn't really say a lot about what that bug is but because I have more below it I'm going to allow it in this case. And it says When an admin logged out of the admin area, they could not log in to the members area because their session, user id, was still set to the admin id. This patch fixes the bug by setting session, user id, to nil when any user logs out of any area. That is very descriptive, it really lets us know what's inside this commit. Why the commit was made and what it's supposed to do. Some of these best practices may feel a little bit weird at first, but I think you'll get used to them and find them useful over time."

COMMIT LOGS: 
	- git log
This commands displays the details of all the commits made so far. 
It shows the unique commit id, who the "author (user.name and user.id)" made the commit, at what time and what the commit message was.

To know more about "log" just type
	- git help log
	- git log -n5 (latest 5 commits)
	- git log --since=2019-01-01 (commit since the specified date)
	- git log --until=2019-01-01
	- git log --author="Kevin" (no need of full name. Any part of name is okay!)
* Lastly, the most important one is looking up for all the commits with a specific commit. Like looking for all bug fixes: 
	- git log --grep="Bugfix"
here grep is a compute term for "global regular expression"

HASH VALUES OR (SHA-1) values:
- Git maintains data integrity 
	- It does so by generating a unique 40 chararacter long hexadecial code (0-9, a-f) by taking parent, author, commit message all the snapshot of our code(changes made to file, directory) add it in the staging area and pass them to SHA-1  algorithm and hence generate unique hash value.

HEAD:
"
- [Kevin] In this movie, we'll gain an understanding of the HEAD Pointer in Git. Git maintains a reference variable called HEAD. All capitals, H-E-A-D. We call this variable a pointer, because its purpose is to reference, or point to, a specific commit in the repository. As we make new commits, the pointer changes, or moves, to point to a new commit. The HEAD always points to the tip of the current branch in our repository. Now the repository has nothing to do with the staging index or the working directory. It's a way of tracking the current position in the repository."

GIT STATUS:
	- git status
	gives the status of all the files in our directory if they have been staged or commited or not. If the repository and working directory are same or not.

git diff:
	- git diff
	- Show the difference in the working directory and staging area
-git diff --staged:
	- Shows the difference in the repository and staging area
	- same as : git diff --cached (until git version 1.7)
- git diff --color-words:
	- Shows the exact words  in file which have been changed
- git diff hashValue1..hashValue2
	- Shows the difference between two commits
- git rm file_name.ext
	- tell git remove the file
	- it adds the file in the staging area for us
	- the deletion should also be commited to let the git know that 	it has been deleted
        - another way to delete file in simply moving the file in 		another directory which is not our repository and then let git 		know it has been deleted by 
		- git rm file-name.ext
		- commit the deletion
- git mv file1.txt file2.txt
	- this command renames a file
	- rename is technically similar to moving a file across
- git commit -am "commit message" / stage and commit shortcut
	- this command add and commits all the files which have
 	previoulsy been added in the staging area and reporsitory 		without being needed to do them separately
	- it doesn't commit the files which are new and not staged 
	- a means add and m means message 
- git show hash_value 
	- git show 23ef43 
	- commit number need not be full 40 characters
	- shows the diff in the commit number specified
- unstage file
	- git reset HEAD file_name
- discard changes in working directory
	- git checkout -- file_name
	

-git commit --amend -m "commit message"
	- This command helps to change the previous commit message and 		commit everything not included in the previous commit with new 		commit message 
- Retrive file from a specific commit
	- git checkout HASHvalue filename
	- eg. git checkout ab653 file1.txt
- Make .gitignore global. So that all the files to be ignored in all 		repositories are written in a single ignore file
	- git config --global core.excludesfile ~/.gitignore_global 		(any file name)

	
Configure tooling
Configure user information for all local repositories

$ git config --global color.ui auto
Enables helpful colorization of command line output

$ git config --global user.email "[email address]"
Sets the email you want attached to your commit transactions

$ git config --global user.name "[name]"
Sets the name you want attached to your commit transactions

** git auto-completion





1) After all the above configuration is done we need to add our remote 
repository which is my github account in my case. 

* Create and add remote repository
- git remote add origin "https://github.com/Jyoti09/SportsCheck"

* To see if we can push or pull
- git remote -v
